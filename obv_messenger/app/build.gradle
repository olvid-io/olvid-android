plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'com.google.protobuf'
    id 'com.google.gms.google-services'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.compose' version "$kotlin_version"
    id 'com.google.devtools.ksp' version "2.1.0-1.0.29"
}

import org.gradle.internal.os.OperatingSystem
OperatingSystem os = OperatingSystem.current()

ksp {
    arg("room.schemaLocation","$projectDir/schemas".toString())
    arg("room.incremental", "true")
    arg("room.generateKotlin", "false")
}

android {
    compileSdk 35

    defaultConfig {
        manifestPlaceholders
        applicationId "io.olvid.messenger"
        minSdkVersion 21
        targetSdk 35
        versionCode 263
        versionName "3.6"
        vectorDrawables.useSupportLibrary true
        multiDexEnabled true
        resourceConfigurations += ['en', 'fr']
        manifestPlaceholders.appAuthRedirectScheme = "olvid.openid"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /////////////
        // Switch this settings to "false" to disable SSL handshake verification altogether.
        // - when "true", Olvid will pin all SSL certificates it encounters so that it may warn the user when a certificate changes
        // - in some contexts (typically with an SSL proxy configured at the OS level) this handshake verification may cause issues
        // If unsure, leave this "true".
        buildConfigField "boolean", "ENABLE_SSL_HANDSHAKE_VERIFICATION", "true"
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility 11
        targetCompatibility 17
    }
    kotlin {
        jvmToolchain(21)
    }
    packagingOptions {
        resources {
            excludes.add('META-INF/INDEX.LIST')
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.15"
    }

    flavorDimensions += "features"
    flavorDimensions += "google-services"

    productFlavors {
        prod {
            dimension "features"
            buildConfigField "String", "HARDCODED_API_KEY", "null"
            buildConfigField "String", "HARDCODED_DATABASE_SECRET", "null"
            buildConfigField "String", "SERVER_NAME", "\"https://server.olvid.io\""
            buildConfigField "String", "KEYCLOAK_REDIRECT_URL", "\"https://openid-redirect.olvid.io/\""
            buildConfigField "int", "LOG_LEVEL", "io.olvid.engine.Logger.INFO"
            manifestPlaceholders = [
                    KEYCLOAK_REDIRECT_HOST: "openid-redirect.olvid.io",
                    MAPS_API_KEY: "<please fill in your own API key>"
            ]
        }

        full {
            dimension "google-services"

            buildConfigField "boolean", "USE_BILLING_LIB", "true"
            buildConfigField "boolean", "USE_FIREBASE_LIB", "true"
            buildConfigField "boolean", "USE_GOOGLE_LIBS", "true"
        }

        nogoogle {
            dimension "google-services"
            applicationIdSuffix '.nogoogle'
            versionNameSuffix '-nogoogle'

            buildConfigField "boolean", "USE_BILLING_LIB", "false"
            buildConfigField "boolean", "USE_FIREBASE_LIB", "false"
            buildConfigField "boolean", "USE_GOOGLE_LIBS", "false"
        }
    }

    namespace 'io.olvid.messenger'
    kotlinOptions {
        jvmTarget = '17'
    }
}

composeCompiler {
    enableStrongSkippingMode = true
    reportsDestination = layout.buildDirectory.dir("compose_compiler")
    metricsDestination = layout.buildDirectory.dir("compose_compiler")
}

androidComponents {
    onVariants(selector().withBuildType("release")) {
        it.packaging.resources.excludes.add("META-INF/*")
    }
}

dependencies {
    final def room_version = '2.6.1'

    testImplementation "junit:junit:4.13.2"

    ksp "androidx.room:room-compiler:$room_version"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'

    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(path: ':libwebrtc')
    implementation project(path: ':sardine-android')
    implementation project(':engine')


    implementation 'com.google.android.material:material:1.12.0'

    implementation 'androidx.core:core-ktx:1.15.0'

    def composeBom = platform 'androidx.compose:compose-bom:2025.01.00'
    implementation composeBom
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.animation:animation-graphics'
    implementation 'androidx.compose.runtime:runtime-livedata'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    final def lifecycle_version = '2.8.7'
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$lifecycle_version"
    debugImplementation 'androidx.compose.ui:ui-tooling'
    final def accompanist_version = '0.36.0'
    implementation "com.google.accompanist:accompanist-themeadapter-appcompat:$accompanist_version"
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version"
    implementation 'sh.calvin.reorderable:reorderable:2.3.3'

    final def coil_version = '2.7.0'
    implementation "io.coil-kt:coil-compose:$coil_version"
    implementation "io.coil-kt:coil-video:$coil_version"
    implementation "io.coil-kt:coil-svg:$coil_version"
    implementation "io.coil-kt:coil-gif:$coil_version"

    // starting with zxing 3.4.0, API level 24 is required...
    implementation 'com.google.zxing:core:3.3.3'

    // starting with jackson 2.14, API level 26 is required...
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.emoji2:emoji2:1.5.0'
    implementation 'androidx.emoji2:emoji2-bundled:1.5.0'
    implementation 'androidx.activity:activity-ktx:1.10.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    final def camera_version = '1.4.1'
    implementation "androidx.camera:camera-camera2:$camera_version"
    implementation "androidx.camera:camera-lifecycle:$camera_version"
    implementation "androidx.camera:camera-view:$camera_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation 'androidx.exifinterface:exifinterface:1.3.7'
    implementation 'androidx.fragment:fragment-ktx:1.8.5'
    implementation 'androidx.fragment:fragment-compose:1.8.5'
    implementation 'androidx.media3:media3-exoplayer:1.5.1'
    implementation 'androidx.media3:media3-ui:1.5.1'
    implementation 'androidx.media:media:1.7.0'
    final def navigation_version = '2.8.6'
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-compose:$navigation_version"
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation 'net.zetetic:sqlcipher-android:4.6.1@aar'
    implementation 'androidx.sharetarget:sharetarget:1.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.work:work-runtime:2.10.0'
    implementation 'androidx.datastore:datastore-preferences:1.1.2'
    implementation 'androidx.security:security-crypto-ktx:1.1.0-alpha06'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.1'
    implementation 'org.jsoup:jsoup:1.18.3'

    def paging_version = '3.3.5'
    implementation "androidx.paging:paging-common:$paging_version"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    implementation "androidx.paging:paging-compose:$paging_version"
    implementation "androidx.room:room-paging:$room_version"

    // webclient
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'

    // openID
    implementation 'net.openid:appauth:0.11.1'
    implementation 'org.bitbucket.b_c:jose4j:0.9.6'

    // map libre integration
    implementation 'org.maplibre.gl:android-sdk:11.7.1'
    implementation 'org.maplibre.gl:android-plugin-annotation-v9:3.0.2'

    final def commonmark_version = '0.24.0'
    implementation "org.commonmark:commonmark:$commonmark_version"
    implementation "org.commonmark:commonmark-ext-gfm-strikethrough:$commonmark_version"

    ///////////
    // Google closed source libs
    ///////////

    // Billing
    fullImplementation 'com.android.billingclient:billing:7.1.1'

    // Firebase
    fullImplementation('com.google.firebase:firebase-messaging:24.1.0') {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    // google map integration
    fullImplementation 'com.google.android.gms:play-services-maps:19.0.0'
    fullImplementation 'com.google.android.gms:play-services-location:21.3.0'

    // Google Drive
    fullImplementation 'com.google.android.gms:play-services-auth:21.3.0'
    fullImplementation('com.google.http-client:google-http-client-gson:1.45.3') {
        exclude group: 'org.apache.httpcomponents'
    }
    fullImplementation('com.google.api-client:google-api-client-android:2.7.2') {
        exclude group: 'org.apache.httpcomponents'
    }
    fullImplementation('com.google.apis:google-api-services-drive:v3-rev20240903-2.0.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    // opensource license page
    fullImplementation 'com.google.android.gms:play-services-oss-licenses:17.1.0'

    // ML kit
    fullImplementation 'com.google.mlkit:barcode-scanning:17.3.0'
    fullImplementation 'com.google.mlkit:text-recognition:16.0.1'
}

protobuf {
    protoc {
        if (os.isMacOsX()) {
            artifact = 'com.google.protobuf:protoc:3.18.0:osx-x86_64'
        } else {
            artifact = 'com.google.protobuf:protoc:3.18.0'
        }
    }
    plugins {
        javalite {
            if (os.isMacOsX()) {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0:osx-x86_64'
            } else {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
            }
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    remove java
                }
                task.plugins {
                    javalite { }
                }
            }
        }
    }
}

// disable google services plugin task for nogoogle flavor
android.applicationVariants.configureEach { variant ->
    def googleTask = tasks.findByName("process${variant.name.capitalize()}GoogleServices")
    googleTask.enabled = !variant.flavorName.contains("Nogoogle")
}